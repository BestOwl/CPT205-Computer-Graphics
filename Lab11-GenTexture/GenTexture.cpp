/*Function:
Texture mapping uses a procedure to create the textural pattern.
*The texture consisting of alternating white and black squares,
*like a checkerboard - is generated by the program. The program
*applies this texture to two squares, which are then rendered in
*perspective, one of them facing the viewer squarely and the
*other tilting back at 45 degrees.
*/

#define FREEGLUT_STATIC
#include <GL/freeglut.h>
#include <stdlib.h>
#include <stdio.h>

// define a 64*64*3 plane for checkerboard
#define checkImageWidth 64
#define checkImageHeight 64
GLubyte checkImage[checkImageWidth][checkImageHeight][3];

// make a checkerboard 
void makeCheckImage(void) {
	int i, j, c;
	for (i = 0; i < checkImageWidth; i++) {
		for (j = 0; j < checkImageHeight; j++) {
			c = ((((i & 0x8) == 0) ^ ((j & 0x8) == 0))) * 255; // bitwise AND and OR operations,
			checkImage[i][j][0] = (GLubyte)c; // which are faster than normal calculations
			checkImage[i][j][1] = (GLubyte)c;
			checkImage[i][j][2] = (GLubyte)c;
		}
	}
}

// all the texture-mapping initialisation occurs here
void myinit(void) {
	// specify clear values for the color buffers
	// Specify the red, green, blue and alpha values used when the color buffers are cleared.
	// The initial values are all 0.
	glClearColor(0.0, 0.0, 1.0, 0.0);
	// enable or disable server-side GL capabilities
	glEnable(GL_DEPTH_TEST);
	// specify the value used for depth buffer comparisons
	// GL_LEQUAL: Passes if the incoming depth value is less than or equal to the stored depth value.
	glDepthFunc(GL_LEQUAL);
	// make a checkerboard
	makeCheckImage();
	// set pixel storage modes
	glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
	// specify a two-dimensional texture image
	// GL_UNPACK_ALIGNMENT: specifies the alignment requirements for the start of each pixel row
	// in memory.
	// The allowable values are 1 (byte-alignment), 2 (rows aligned to even-numbered bytes), 
	// 4 (word-alignment), and 8 (rows start on double-word boundaries).
	glTexImage2D(GL_TEXTURE_2D, 0, 3, checkImageWidth, checkImageHeight, 0, GL_RGB, GL_UNSIGNED_BYTE,
		&checkImage[0][0][0]);
	// set texture parameters
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	// set texture environment parameters
	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL);
	glEnable(GL_TEXTURE_2D);
	// select flat or smooth shading
	glShadeModel(GL_FLAT);
}

// specify texture co-ordinates
void display(void) {
	// clear buffers to preset values
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	// delimit the vertices of a primitive or a group of like primitives
	// GL_QUADS: Treats each group of four vertices as an independent quadrilateral
	glBegin(GL_QUADS);
	// specify the ordinates of checkerboard facing the viewer squarely
	// set the current texture coordinates
	glTexCoord2f(0.0, 0.0);
	// specify a vertex, X Y Z
	glVertex3f(-2.0, -1.0, 0.0);
	glTexCoord2f(0.0, 1.0);
	glVertex3f(-2.0, 1.0, 0.0);
	glTexCoord2f(1.0, 1.0);
	glVertex3f(0.0, 1.0, 0.0);
	glTexCoord2f(1.0, 0.0);
	glVertex3f(0.0, -1.0, 0.0);

	// specify the ordinates of checkerboard tilting back at 45 degrees
	glTexCoord2f(0.0, 0.0);
	glVertex3f(1.0, -1.0, 0.0);
	glTexCoord2f(0.0, 1.0);
	glVertex3f(1.0, 1.0, 0.0);
	glTexCoord2f(1.0, 1.0);
	glVertex3f(2.41421, 1.0, -1.41421);
	glTexCoord2f(1.0, 0.0);
	glVertex3f(2.41421, -1.0, -1.41421);
	glEnd();

	// force execution of GL commands in finite time
	glFlush();
}

// 
void myReshape(GLsizei w, GLsizei h) {
	// set the viewport
	glViewport(0, 0, w, h);
	// specify which matrix is the current matrix
	// GL_PROJECTION: Applies subsequent matrix operations to the projection matrix stack.
	glMatrixMode(GL_PROJECTION);
	// replace the current matrix with the identity matrix
	glLoadIdentity();
	// set up a perspective projection matrix
	gluPerspective(60.0, 1.0 * (GLfloat)w / (GLfloat)h, 1.0, 30.0);

	// GL_MODELVIEW: Applies subsequent matrix operations to the modelview matrix stack.
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	// multiply the current matrix by a translation matrix
	// The current matrix is multiplied by this translation matrix, with the product 
	// replacing the current matrix
	glTranslatef(0.0, 0.0, -3.6);
}

// 
void main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA | GLUT_DEPTH);
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(500, 500);
	if (!glutCreateWindow("Texture Mapping"))
		exit(0);
	myinit();
	// glutReshapeFunc sets the reshape callback for the current window
	glutReshapeFunc(myReshape);
	// sets the display callback for the current window
	glutDisplayFunc(display);
	// enters the GLUT event processing loop
	// This routine should be called at most once in a GLUT program.
	// Once called, this routine will never return. It will call as
	// necessary any callbacks that have been registered.
	glutMainLoop();
}
